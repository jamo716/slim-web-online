// set up a simple neutral simulation
initialize() {
	initializeMutationRate(mutRate);
	
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
}

// create a population of 500 individuals
1 {
	//reschedule simulationFinished callback based on user input
	sim.rescheduleScriptBlock(s1, start=simLength, end=simLength);
	//make a directory to store output that is named with the id	
	createDirectory(paste("/Users/jameson/Documents/GitHub/slim-web-online/server/neutral-sim/slim-output/" + asString(id)));
	//path to read
	path = paste("/Users/jameson/Documents/GitHub/slim-web-online/server/neutral-sim/slim-output/" + asString(id));
	//set working directory equal to that path
	setwd(path);
	
	sim.addSubpop("p1", popSize);
	writeFile("test.csv", paste(c(sim.generation, sim.countOfMutationsOfType(m1)), sep = ","), append = F);
	print(getwd());
}

1: {

	if(sim.generation % 100 == 0){
		writeFile("test.csv", paste(c(sim.generation, sim.countOfMutationsOfType(m1)), sep = ","), append = T);
	}
}

// output samples of 10 genomes periodically, all fixed mutations at end
s1 2000 late() {
	sim.simulationFinished();
}
